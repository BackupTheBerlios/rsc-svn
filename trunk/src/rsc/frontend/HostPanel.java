/*
 * HostPanel.java
 *
 * Created on November 1, 2006, 3:41 PM
 */

/*
 * Copyright 2008 Marcel Richter
 * 
 * This file is part of RSC (Remote Service Configurator).
 *
 *  RSC is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  RSC is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 */

package rsc.frontend;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.AbstractCellEditor;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import rsc.CollectionListener;
import rsc.RSC;
import rsc.backend.HostImpl;
import rsc.backend.connections.Connection;
import rsc.backend.connections.ConnectionContainer;
import rsc.backend.connections.ConnectionException;
import rsc.backend.connections.ConnectionListener;
import rsc.backend.modules.Module;
import rsc.backend.modules.ModuleContainer;

public class HostPanel extends javax.swing.JPanel implements ConnectionListener {

    private HostImpl host;
    private boolean startup;
    private ModuleTableModel moduleTableModel;
    private ModuleTableRenderer moduleTableRenderer;

    /** Creates new form HostPanel */
    public HostPanel(HostImpl host) {
        startup = true;
        this.host = host;
        initComponents();
        setHostPanelVisible(host.getConnection().isConnected());
        Connection hostConnection = host.getConnection();
        hostConnection.addConnectionListener(this);
        for (ConnectionContainer c : RSC.getInstance().getConnections()) {
            cmb_connection.addItem(c);
            if (c.isInstance(hostConnection)) {
                cmb_connection.setSelectedItem(c);
            }
        }
        p_configurator.add(hostConnection.getConfigurationPanel());
        p_configurator.updateUI();
        for (ModuleContainer m : RSC.getInstance().getModuls()) {
            cmb_modules.addItem(m);
        }
        moduleTableRenderer = new ModuleTableRenderer();
        t_modules.setDefaultRenderer(JButton.class, moduleTableRenderer);
        t_modules.setCellEditor(moduleTableRenderer);
        moduleTableModel = new ModuleTableModel(host);
        t_modules.setModel(moduleTableModel);
        t_modules.getColumnModel().getColumn(0).setMinWidth(30);
        t_modules.getColumnModel().getColumn(0).setMaxWidth(30);
        t_modules.getColumnModel().getColumn(0).setPreferredWidth(30);

        startup = false;
    }

    public JPopupMenu getPopupMenu() {
        return pm_host;
    }
    
    public void connectionDisconnecting() {
    }

    public void connectionDisconnect() {
        setHostPanelVisible(false);
    }

    public void connectionConnect() {
        setHostPanelVisible(true);
    }

    private void setHostPanelVisible(boolean enable) {
        b_modul_add.setEnabled(enable);
        t_modules.setEnabled(enable);
        cmb_modules.setEnabled(enable);
        mi_connect.setEnabled(!enable);
        mi_disconnect.setEnabled(enable);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pm_host = new javax.swing.JPopupMenu();
        mi_removeHost = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        mi_connect = new javax.swing.JMenuItem();
        mi_disconnect = new javax.swing.JMenuItem();
        l_connection = new javax.swing.JLabel();
        cmb_connection = new javax.swing.JComboBox();
        p_configurator = new javax.swing.JPanel();
        l_edit_services = new javax.swing.JLabel();
        cmb_modules = new javax.swing.JComboBox();
        b_modul_add = new javax.swing.JButton();
        sp_modules = new javax.swing.JScrollPane();
        t_modules = new javax.swing.JTable();

        mi_removeHost.setText("remove Host");
        mi_removeHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_removeHostActionPerformed(evt);
            }
        });
        pm_host.add(mi_removeHost);
        pm_host.add(jSeparator1);

        mi_connect.setText("connect");
        mi_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_connectActionPerformed(evt);
            }
        });
        pm_host.add(mi_connect);

        mi_disconnect.setText("disconnect");
        mi_disconnect.setEnabled(false);
        mi_disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_disconnectActionPerformed(evt);
            }
        });
        pm_host.add(mi_disconnect);

        setLayout(new java.awt.GridBagLayout());

        l_connection.setForeground(new java.awt.Color(102, 102, 255));
        l_connection.setText("Specify your connection");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 0, 0);
        add(l_connection, gridBagConstraints);

        cmb_connection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_connectionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 0, 5);
        add(cmb_connection, gridBagConstraints);

        p_configurator.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(p_configurator, gridBagConstraints);

        l_edit_services.setForeground(new java.awt.Color(102, 102, 255));
        l_edit_services.setText("Edit your Services");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 5, 0, 0);
        add(l_edit_services, gridBagConstraints);

        cmb_modules.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        add(cmb_modules, gridBagConstraints);

        b_modul_add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rsc/frontend/icon/plus_16.png"))); // NOI18N
        b_modul_add.setEnabled(false);
        b_modul_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_modul_addActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(b_modul_add, gridBagConstraints);

        t_modules.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Service"
            }
        ));
        t_modules.setEnabled(false);
        t_modules.setShowHorizontalLines(false);
        t_modules.setShowVerticalLines(false);
        sp_modules.setViewportView(t_modules);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 15, 5);
        add(sp_modules, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    private void mi_disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_disconnectActionPerformed
        host.getConnection().disconnect();
}//GEN-LAST:event_mi_disconnectActionPerformed

    private void mi_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_connectActionPerformed
        try {
            host.getConnection().connect();
        } catch (ConnectionException ex) {
            JOptionPane.showMessageDialog(this, "can't connect to server", "connection error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mi_connectActionPerformed

    private void mi_removeHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_removeHostActionPerformed
        RSC.getInstance().removeHost(host);
    }//GEN-LAST:event_mi_removeHostActionPerformed

    private void b_modul_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_modul_addActionPerformed
        try {
            host.addModul(((ModuleContainer) cmb_modules.getSelectedItem()).newInstance(host));
        } catch (SecurityException ex) {
            ex.printStackTrace();
        } catch (IllegalArgumentException ex) {
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        } catch (InvocationTargetException ex) {
            ex.printStackTrace();
        } catch (NoSuchMethodException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_b_modul_addActionPerformed

    private void cmb_connectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_connectionActionPerformed
        Connection c;
        if (startup || ((ConnectionContainer) cmb_connection.getSelectedItem()).isInstance(host.getConnection())) {
            return;
        }
        host.getConnection().disconnect();
        try {

            c = ((ConnectionContainer) cmb_connection.getSelectedItem()).newInstance();
            c.addConnectionListener(this);
            host.setConnection(c);
            p_configurator.removeAll();
            p_configurator.add(c.getConfigurationPanel());
            p_configurator.updateUI();
            if (c.isConnected()) {
                connectionConnect();
            }
            return;
        } catch (SecurityException ex) {
            ex.printStackTrace();
        } catch (IllegalArgumentException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        } catch (NoSuchMethodException ex) {
            ex.printStackTrace();
        } catch (InvocationTargetException ex) {
            ex.printStackTrace();
        }

        System.out.println("unable to load connection");
        for (ConnectionContainer cc : RSC.getInstance().getConnections()) {
            if (cc.isInstance(host.getConnection())) {
                cmb_connection.setSelectedItem(cc);
            }
        }
    }//GEN-LAST:event_cmb_connectionActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_modul_add;
    private javax.swing.JComboBox cmb_connection;
    private javax.swing.JComboBox cmb_modules;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel l_connection;
    private javax.swing.JLabel l_edit_services;
    private javax.swing.JMenuItem mi_connect;
    private javax.swing.JMenuItem mi_disconnect;
    private javax.swing.JMenuItem mi_removeHost;
    private javax.swing.JPanel p_configurator;
    private javax.swing.JPopupMenu pm_host;
    private javax.swing.JScrollPane sp_modules;
    private javax.swing.JTable t_modules;
    // End of variables declaration//GEN-END:variables

    private class ModuleRemoveButton extends JButton implements ActionListener/*, TableCellRenderer*/ {

        private Module module;

        public ModuleRemoveButton(Module module) {
            this.module = module;
            addActionListener(this);
            setIcon(new javax.swing.ImageIcon(getClass().getResource("/rsc/frontend/icon/minus_16.png")));
        }

        public void actionPerformed(ActionEvent e) {
            System.out.println("remove Module");
            host.removeModul(module);
        }

        /*public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            return this;
        }*/
    }

    private class ModuleTableRenderer extends AbstractCellEditor implements TableCellEditor, TableCellRenderer {

        private JTextField text = new JTextField();

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (value instanceof JButton) {
                return ((JButton) value);
            }
            return text;
        }

        public Object getCellEditorValue() {
            return null;
        }

        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            if (column == 0) {
                return ((ModuleRemoveButton) value);
            }
            return null;
        }
    }

    private class ModuleTableModel implements TableModel, CollectionListener {

        private HostImpl host;
        private Vector<TableModelListener> listeners;
        private Map<Module, ModuleRemoveButton> buttons;

        public ModuleTableModel(HostImpl host) {
            this.host = host;
            listeners = new Vector<TableModelListener>();
            buttons = new HashMap<Module, ModuleRemoveButton>(host.getModuls().size());
            host.addModulListener(this);
        }

        public int getRowCount() {
            return host.getModuls().size();
        }

        public int getColumnCount() {
            return 2;
        }

        public String getColumnName(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return "";
                case 1:
                    return "Module";
                default:
                    return "";
            }
        }

        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return JButton.class;
                case 1:
                    return Object.class;
                default:
                    return Object.class;
            }
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            if (columnIndex == 1) {
                return false;
            }
            return false;
        }

        private Module getModule(int row) {
            return host.getModuls().get(row);
        }

        private ModuleRemoveButton getButton(int row) {
            ModuleRemoveButton ret;
            Module m = getModule(row);
            if ((ret = buttons.get(m)) == null) {
                return buttons.put(m, new ModuleRemoveButton(m));
            }
            return ret;
        }

        public Object getValueAt(int rowIndex, int columnIndex) {
            if (columnIndex == 1) {
                return getModule(rowIndex);
            }
            return getButton(rowIndex);
        }

        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            if (columnIndex == 1) {
                Module m = ((Module) t_modules.getValueAt(rowIndex, columnIndex));
                m.setName(aValue.toString());
                host.fireModulChangeEvent(m);
            }
        }

        public void addTableModelListener(TableModelListener l) {
            listeners.add(l);
        }

        public void removeTableModelListener(TableModelListener l) {
            listeners.remove(l);
        }

        public void fireTableDataChanged() {
            for (TableModelListener x : listeners) {
                x.tableChanged(new TableModelEvent(this));
            }
        }

        public void elementAdded(Object element) {
            fireTableDataChanged();
        }

        public void elementRemoved(Object element) {
            buttons.remove(element);
            fireTableDataChanged();
        }

        public void elementCanged(Object element) {
            fireTableDataChanged();
        }
    }

}
