/*
 * Include.java
 *
 * Created on September 8, 2008, 7:31 PM
 */
package rsc.backend.modules.ips.frontend;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import rsc.backend.modules.Module;
import rsc.backend.modules.ips.IPS;
import rsc.backend.modules.ips.backend.Include;
import rsc.backend.modules.ips.backend.Snortconf;
import rsc.backend.modules.ips.backend.Snortelement;

/**
 *
 * @author  marcel richter
 */
public class IncludePanel extends javax.swing.JPanel {

    private IPS ips;
    private Snortconf conf;
    //private DefaultTableModel dtm;
    private SnortelementTableModel stm;
    private JFileChooser jfs;

    /** Creates new form Include */
    public IncludePanel(IPS ips) {
        this.ips = ips;
        this.conf = ips.getConf();
        initComponents();

        //dtm = new DefaultTableModel(colNames, 0);
        stm = new SnortelementTableModel(conf, Include.class);
        t_includes.setModel(stm);
    }

    public void refresh() {


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        l_includes = new javax.swing.JLabel();
        sp_includes = new javax.swing.JScrollPane();
        t_includes = new javax.swing.JTable();
        b_add = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        l_includes.setText("Includes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(l_includes, gridBagConstraints);

        t_includes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        sp_includes.setViewportView(t_includes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(sp_includes, gridBagConstraints);

        b_add.setText("add File...");
        b_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_addActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(b_add, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    private void b_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_addActionPerformed
        int ret = jfs.showOpenDialog(null);
        if (ret == jfs.APPROVE_OPTION) {
            System.out.println(jfs.getSelectedFile().getName());
            Include i = new Include(jfs.getSelectedFile().getName());
            conf.add(i);
        //dtm.addRow(new Object[]{new SnortelementRemoveButton(conf,i), i});
        }
    }//GEN-LAST:event_b_addActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_add;
    private javax.swing.JLabel l_includes;
    private javax.swing.JScrollPane sp_includes;
    private javax.swing.JTable t_includes;
    // End of variables declaration//GEN-END:variables
    private class SnortelementRemoveButton extends JButton implements ActionListener, TableCellRenderer {

        private Snortelement element;
        private Snortconf conf;
        private SnortelementTableModel stm;

        public SnortelementRemoveButton(Snortconf conf, SnortelementTableModel stm, Snortelement element) {
            this.element = element;
            this.conf = conf;
            this.stm = stm;
            addActionListener(this);
            setIcon(new javax.swing.ImageIcon(getClass().getResource("/rsc/frontend/icon/minus_16.png")));
        }

        public Snortelement getElement() {
            return element;
        }

        public void actionPerformed(ActionEvent e) {
            System.out.println("remove Element");
            conf.remove(element);
            stm.elementRemoved(element);
        }

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            return this;
        }
    }

    private class SnortelementTableModel implements TableModel {

        private Snortconf conf;
        private Class elementClass;
        private Vector<TableModelListener> listeners;
        private Vector<SnortelementRemoveButton> elements;

        public SnortelementTableModel(Snortconf conf, Class elementClass) {
            this.conf = conf;
            Snortelement e;
            elements = new Vector<SnortelementRemoveButton>();
            Iterator<Snortelement> it = conf.iterator(elementClass);
            while (it.hasNext()) {
                e = it.next();
                //elements.add(new SnortelementRemoveButton(conf, e));
            }
            listeners = new Vector<TableModelListener>();
        }

        public int getRowCount() {
            return elements.size();
        }

        public int getColumnCount() {
            return 2;
        }

        public String getColumnName(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return "";
                case 1:
                    return "Element";
                default:
                    return "";
            }
        }

        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return SnortelementRemoveButton.class;
                case 1:
                    return Object.class;
                default:
                    return Object.class;
            }
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            if (columnIndex == 1) {
                return false;
            }
            return false;
        }

        private Snortelement getElement(int row) {
            return elements.get(row).getElement();
        }

        private SnortelementRemoveButton getButton(int row) {
            return null;
        }

        public Object getValueAt(int rowIndex, int columnIndex) {
            if (columnIndex == 1) {
                return getElement(rowIndex);
            }
            return getButton(rowIndex);
        }

        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
        /*if (columnIndex == 1) {
        Module m = ((Module) t_modules.getValueAt(rowIndex, columnIndex));
        m.setName(aValue.toString());
        host.fireModulChangeEvent(m);
        }*/
        }

        public void addTableModelListener(TableModelListener l) {
            listeners.add(l);
        }

        public void removeTableModelListener(TableModelListener l) {
            listeners.remove(l);
        }

        public void fireTableDataChanged() {
            for (TableModelListener x : listeners) {
                x.tableChanged(new TableModelEvent(this));
            }
        }

        public void elementAdded(Object element) {
            fireTableDataChanged();
        }

        public void elementRemoved(Object element) {
            elements.remove(element);
            fireTableDataChanged();
        }

        public void elementCanged(Object element) {
            fireTableDataChanged();
        }
    }
}
