/*
 * SSHConnectionConfigurator.java
 *
 * Created on November 1, 2006, 8:39 PM
 */

/*
 * Copyright 2008 Marcel Richter
 * 
 * This file is part of RSC (Remote Service Configurator).
 *
 *  RSC is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  RSC is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 */

package rsc.backend.connections.sshConnection;

import javax.swing.JOptionPane;
import rsc.backend.connections.*;

/**
 * mit diesem panel wird die ssh-verbindung konfiguriert
 * es laesst den nutzer host, port, benutzername und passwort eingeben 
 * 
 * todo: die rsa finger-prints sollten unter advanced als default-accept definiert 
 * werden koennen 
 * 
 * @author marcel richter
 */
public class SSHConnectionConfigurator extends javax.swing.JPanel implements ConnectionListener {

    SSHConnection connection;

    /** 
     * Creates new form SSHConnectionConfigurator 
     */
    public SSHConnectionConfigurator(SSHConnection connection) {
        this.connection = connection;
        connection.addConnectionListener(this);
        initComponents();
        update();
    }

    public void update() {
        txt_hostname.setText(connection.getHostname());
        txt_port.setText("" + connection.getPort());
        txt_username.setText(connection.getUsername());
        txt_password.setText(connection.getPassword());
    }
    
    public void connectionDisconnecting() {
    }

    public void connectionDisconnect() {
        b_connect.setEnabled(true);
        b_disconnect.setEnabled(false);
    }

    public void connectionConnect() {
        b_connect.setEnabled(false);
        b_disconnect.setEnabled(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lbl_host = new javax.swing.JLabel();
        txt_hostname = new javax.swing.JTextField();
        b_advanced = new javax.swing.JButton();
        lbl_port = new javax.swing.JLabel();
        txt_port = new javax.swing.JTextField();
        b_connect = new javax.swing.JButton();
        b_disconnect = new javax.swing.JButton();
        lbl_username = new javax.swing.JLabel();
        txt_username = new javax.swing.JTextField();
        lbl_password = new javax.swing.JLabel();
        txt_password = new javax.swing.JPasswordField();

        setLayout(new java.awt.GridBagLayout());

        lbl_host.setText("Host Name (or IP address)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(lbl_host, gridBagConstraints);

        txt_hostname.setText("127.0.0.1");
        txt_hostname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_hostnameFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(txt_hostname, gridBagConstraints);

        b_advanced.setText("Advanced...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        add(b_advanced, gridBagConstraints);

        lbl_port.setText("Port");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        add(lbl_port, gridBagConstraints);

        txt_port.setText("22");
        txt_port.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_portFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        add(txt_port, gridBagConstraints);

        b_connect.setText("Conncet");
        b_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_connectActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 0);
        add(b_connect, gridBagConstraints);

        b_disconnect.setText("Disconnect");
        b_disconnect.setEnabled(false);
        b_disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_disconnectActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 30, 0, 0);
        add(b_disconnect, gridBagConstraints);

        lbl_username.setText("Username");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(lbl_username, gridBagConstraints);

        txt_username.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_usernameFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(txt_username, gridBagConstraints);

        lbl_password.setText("Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        add(lbl_password, gridBagConstraints);

        txt_password.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_passwordFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        add(txt_password, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    private void txt_passwordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_passwordFocusLost
        connection.setPassword(new String(txt_password.getPassword()));
    }//GEN-LAST:event_txt_passwordFocusLost

    private void txt_usernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_usernameFocusLost
        connection.setUsername(txt_username.getText());
    }//GEN-LAST:event_txt_usernameFocusLost

    private void txt_portFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_portFocusLost
        connection.setPort(Integer.parseInt(txt_port.getText()));
    }//GEN-LAST:event_txt_portFocusLost

    private void txt_hostnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_hostnameFocusLost
        connection.setHostname(txt_hostname.getText());
    }//GEN-LAST:event_txt_hostnameFocusLost

    private void b_disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_disconnectActionPerformed
        //worker thread sollte benutzt werden
        connection.disconnect();
    }//GEN-LAST:event_b_disconnectActionPerformed

    private void b_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_connectActionPerformed
        //worker thread sollte benutzt werden
        b_connect.setEnabled(false);
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    connection.connect();
                } catch (ConnectionException ex) {
                    b_connect.setEnabled(true);
                    JOptionPane.showMessageDialog(null, "can't connect to server", "connection error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        
    }//GEN-LAST:event_b_connectActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_advanced;
    private javax.swing.JButton b_connect;
    private javax.swing.JButton b_disconnect;
    private javax.swing.JLabel lbl_host;
    private javax.swing.JLabel lbl_password;
    private javax.swing.JLabel lbl_port;
    private javax.swing.JLabel lbl_username;
    private javax.swing.JTextField txt_hostname;
    private javax.swing.JPasswordField txt_password;
    private javax.swing.JTextField txt_port;
    private javax.swing.JTextField txt_username;
    // End of variables declaration//GEN-END:variables
    
}
